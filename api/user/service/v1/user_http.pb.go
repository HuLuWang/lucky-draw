// Code generated by protoc-gen-go-http. DO NOT EDIT.

package cmd

import (
	context "context"
	http1 "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	mux "github.com/gorilla/mux"
	http "net/http"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(http.Request)
var _ = new(context.Context)
var _ = binding.MapProto
var _ = mux.NewRouter

const _ = http1.SupportPackageIsVersion1

type UserHandler interface {
	CreateAddress(context.Context, *CreateAddressReq) (*CreateAddressReply, error)

	CreateUser(context.Context, *CreateUserReq) (*CreateUserReply, error)

	DeleteAddress(context.Context, *DeleteAddressReq) (*DeleteAddressReply, error)

	GetUser(context.Context, *GetUserReq) (*GetUserReply, error)

	ListAddress(context.Context, *ListAddressReq) (*ListAddressReply, error)

	UpdateAddress(context.Context, *UpdateAddressReq) (*UpdateAddressReply, error)

	UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserReply, error)

	VerifyPassword(context.Context, *VerifyPasswordReq) (*VerifyPasswordReply, error)
}

func NewUserHandler(srv UserHandler, opts ...http1.HandleOption) http.Handler {
	h := http1.DefaultHandleOptions()
	for _, o := range opts {
		o(&h)
	}
	r := mux.NewRouter()

	r.HandleFunc("/user.service.v1.User/CreateUser", func(w http.ResponseWriter, r *http.Request) {
		var in CreateUserReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateUser(ctx, req.(*CreateUserReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*CreateUserReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	r.HandleFunc("/user.service.v1.User/UpdateUser", func(w http.ResponseWriter, r *http.Request) {
		var in UpdateUserReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateUser(ctx, req.(*UpdateUserReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*UpdateUserReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	r.HandleFunc("/user.service.v1.User/GetUser", func(w http.ResponseWriter, r *http.Request) {
		var in GetUserReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUser(ctx, req.(*GetUserReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*GetUserReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	r.HandleFunc("/user.service.v1.User/VerifyPassword", func(w http.ResponseWriter, r *http.Request) {
		var in VerifyPasswordReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.VerifyPassword(ctx, req.(*VerifyPasswordReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*VerifyPasswordReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	r.HandleFunc("/user.service.v1.User/CreateAddress", func(w http.ResponseWriter, r *http.Request) {
		var in CreateAddressReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateAddress(ctx, req.(*CreateAddressReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*CreateAddressReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	r.HandleFunc("/user.service.v1.User/UpdateAddress", func(w http.ResponseWriter, r *http.Request) {
		var in UpdateAddressReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAddress(ctx, req.(*UpdateAddressReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*UpdateAddressReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	r.HandleFunc("/user.service.v1.User/DeleteAddress", func(w http.ResponseWriter, r *http.Request) {
		var in DeleteAddressReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteAddress(ctx, req.(*DeleteAddressReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*DeleteAddressReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	r.HandleFunc("/user.service.v1.User/ListAddress", func(w http.ResponseWriter, r *http.Request) {
		var in ListAddressReq
		if err := h.Decode(r, &in); err != nil {
			h.Error(w, r, err)
			return
		}

		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAddress(ctx, req.(*ListAddressReq))
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*ListAddressReply)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	return r
}

type UserHTTPClient interface {
	CreateAddress(ctx context.Context, req *CreateAddressReq, opts ...http1.CallOption) (rsp *CreateAddressReply, err error)

	CreateUser(ctx context.Context, req *CreateUserReq, opts ...http1.CallOption) (rsp *CreateUserReply, err error)

	DeleteAddress(ctx context.Context, req *DeleteAddressReq, opts ...http1.CallOption) (rsp *DeleteAddressReply, err error)

	GetUser(ctx context.Context, req *GetUserReq, opts ...http1.CallOption) (rsp *GetUserReply, err error)

	ListAddress(ctx context.Context, req *ListAddressReq, opts ...http1.CallOption) (rsp *ListAddressReply, err error)

	UpdateAddress(ctx context.Context, req *UpdateAddressReq, opts ...http1.CallOption) (rsp *UpdateAddressReply, err error)

	UpdateUser(ctx context.Context, req *UpdateUserReq, opts ...http1.CallOption) (rsp *UpdateUserReply, err error)

	VerifyPassword(ctx context.Context, req *VerifyPasswordReq, opts ...http1.CallOption) (rsp *VerifyPasswordReply, err error)
}

type UserHTTPClientImpl struct {
	cc *http1.Client
}

func NewUserHTTPClient(client *http1.Client) UserHTTPClient {
	return &UserHTTPClientImpl{client}
}

func (c *UserHTTPClientImpl) CreateAddress(ctx context.Context, in *CreateAddressReq, opts ...http1.CallOption) (out *CreateAddressReply, err error) {
	path := binding.EncodePath("POST", "/user.service.v1.User/CreateAddress", in)
	out = &CreateAddressReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("POST"), http1.PathPattern("/user.service.v1.User/CreateAddress"))

	return
}

func (c *UserHTTPClientImpl) CreateUser(ctx context.Context, in *CreateUserReq, opts ...http1.CallOption) (out *CreateUserReply, err error) {
	path := binding.EncodePath("POST", "/user.service.v1.User/CreateUser", in)
	out = &CreateUserReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("POST"), http1.PathPattern("/user.service.v1.User/CreateUser"))

	return
}

func (c *UserHTTPClientImpl) DeleteAddress(ctx context.Context, in *DeleteAddressReq, opts ...http1.CallOption) (out *DeleteAddressReply, err error) {
	path := binding.EncodePath("POST", "/user.service.v1.User/DeleteAddress", in)
	out = &DeleteAddressReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("POST"), http1.PathPattern("/user.service.v1.User/DeleteAddress"))

	return
}

func (c *UserHTTPClientImpl) GetUser(ctx context.Context, in *GetUserReq, opts ...http1.CallOption) (out *GetUserReply, err error) {
	path := binding.EncodePath("POST", "/user.service.v1.User/GetUser", in)
	out = &GetUserReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("POST"), http1.PathPattern("/user.service.v1.User/GetUser"))

	return
}

func (c *UserHTTPClientImpl) ListAddress(ctx context.Context, in *ListAddressReq, opts ...http1.CallOption) (out *ListAddressReply, err error) {
	path := binding.EncodePath("POST", "/user.service.v1.User/ListAddress", in)
	out = &ListAddressReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("POST"), http1.PathPattern("/user.service.v1.User/ListAddress"))

	return
}

func (c *UserHTTPClientImpl) UpdateAddress(ctx context.Context, in *UpdateAddressReq, opts ...http1.CallOption) (out *UpdateAddressReply, err error) {
	path := binding.EncodePath("POST", "/user.service.v1.User/UpdateAddress", in)
	out = &UpdateAddressReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("POST"), http1.PathPattern("/user.service.v1.User/UpdateAddress"))

	return
}

func (c *UserHTTPClientImpl) UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...http1.CallOption) (out *UpdateUserReply, err error) {
	path := binding.EncodePath("POST", "/user.service.v1.User/UpdateUser", in)
	out = &UpdateUserReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("POST"), http1.PathPattern("/user.service.v1.User/UpdateUser"))

	return
}

func (c *UserHTTPClientImpl) VerifyPassword(ctx context.Context, in *VerifyPasswordReq, opts ...http1.CallOption) (out *VerifyPasswordReply, err error) {
	path := binding.EncodePath("POST", "/user.service.v1.User/VerifyPassword", in)
	out = &VerifyPasswordReply{}

	err = c.cc.Invoke(ctx, path, nil, &out, http1.Method("POST"), http1.PathPattern("/user.service.v1.User/VerifyPassword"))

	return
}
